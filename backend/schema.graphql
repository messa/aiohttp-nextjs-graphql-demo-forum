schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Category implements Node {
  id: ID!
  title: String
  topics: TopicConnection
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]
}

type CategoryEdge {
  cursor: String!
  node: Category
}

type Conversation implements Node {
  id: ID!
  posts(before: String, after: String, first: Int, last: Int): PostConnection
}

type Mutation {
  postReply(input: PostReplyInput!): PostReplyPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  bodyMarkdown: String
  replies(before: String, after: String, first: Int, last: Int): ReplyPostConnection
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  cursor: String!
  node: Post
}

input PostReplyInput {
  bodyMarkdown: String!
  clientMutationId: Boolean
  postId: ID!
}

type PostReplyPayload {
  newReplyPost: ReplyPost
  clientMutationId: Boolean
}

type Query {
  node(id: ID!): Node
  categories(before: String, after: String, first: Int, last: Int): CategoryConnection
}

type ReplyPost implements Node {
  id: ID!
  bodyMarkdown: String
}

type ReplyPostConnection {
  pageInfo: PageInfo!
  edges: [ReplyPostEdge]
}

type ReplyPostEdge {
  cursor: String!
  node: ReplyPost
}

type Subscription {
  countSeconds: Int
  conversationUpdated(conversationId: ID!): Conversation
}

type Topic implements Node {
  id: ID!
  title: String
  conversation: Conversation
  category: Category
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]
}

type TopicEdge {
  cursor: String!
  node: Topic
}
